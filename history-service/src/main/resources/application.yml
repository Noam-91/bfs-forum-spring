#eureka:
#  client:
#    enabled: false


spring:
#  cloud:
#    discovery:
#      enabled: false
  datasource:
    url: "jdbc:mysql://localhost:3306/bfsforum"
    driver: com.mysql.cj.jdbc.Driver
    username: root
    password: 88Yj10hy0326*
  kafka:
    consumer:
      group-id: history-service-group
      auto-offset-reset: earliest

      # wrap both in the ErrorHandlingDeserializer
      key-deserializer:   org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer

      properties:
        # delegate the real work
        spring.deserializer.key.delegate.class:   org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer

        # tell JSON deserializer what type to bind when no headers are present
        spring.json.value.default.type: com.bfsforum.historyservice.kafka.event.HistoryPostViewedEvent
        spring.json.trusted.packages: "*" # Or simply "" for all
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#    consumer:
#      group-id: order-group
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.value.default.type: com.example.commondto.event.PaymentEvent # Replace with your actual class name
#        spring.json.trusted.packages: "" # Or simply "" for all

